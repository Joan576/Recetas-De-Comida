{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_MainLayout = _resolveComponent(\"MainLayout\");\n  return _openBlock(), _createBlock(_component_MainLayout, null, {\n    default: _withCtx(() => [_createCommentVNode(\" Contenido específico de Register \"), _cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n      class: \"register-page\"\n    }, [_createElementVNode(\"div\", {\n      class: \"register-container\"\n    }, [_createElementVNode(\"h2\", null, \"Regístrate\"), _createElementVNode(\"form\", null, [_createElementVNode(\"div\", {\n      class: \"input-group\"\n    }, [_createElementVNode(\"label\", {\n      for: \"email\"\n    }, \"Email\"), _createElementVNode(\"input\", {\n      type: \"email\",\n      id: \"email\"\n    })]), _createElementVNode(\"div\", {\n      class: \"input-group\"\n    }, [_createElementVNode(\"label\", {\n      for: \"password\"\n    }, \"Contraseña\"), _createElementVNode(\"input\", {\n      type: \"password\",\n      id: \"password\"\n    })]), _createElementVNode(\"button\", {\n      type: \"submit\"\n    }, \"Registrar\")])])], -1 /* HOISTED */))]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_MainLayout","default","_withCtx","_createCommentVNode","_createElementVNode","class","for","type","id","_"],"sources":["C:\\Users\\MEZAS\\OneDrive\\Escritorio\\Trabajos U\\Programacion Web\\Proyecto_Recetas\\recetas_front\\src\\components\\registerForm.vue"],"sourcesContent":["<template>\r\n  <MainLayout>\r\n    <!-- Contenido específico de Register -->\r\n    <div class=\"register-page\">\r\n      <div class=\"register-container\">\r\n        <h2>Regístrate</h2>\r\n        <form>\r\n          <div class=\"input-group\">\r\n            <label for=\"email\">Email</label>\r\n            <input type=\"email\" id=\"email\" />\r\n          </div>\r\n          <div class=\"input-group\">\r\n            <label for=\"password\">Contraseña</label>\r\n            <input type=\"password\" id=\"password\" />\r\n          </div>\r\n          <button type=\"submit\">Registrar</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </MainLayout>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport axios from 'axios';\r\n\r\nconst form = ref({\r\n  username: '',\r\n  email: '',\r\n  password: '',\r\n  confirmPassword: '',\r\n});\r\n\r\nconst error = ref('');\r\nconst success = ref(''); // Variable para el mensaje de éxito\r\n\r\nconst handleSubmit = async () => {\r\n  // Validar que las contraseñas coincidan\r\n  if (form.value.password !== form.value.confirmPassword) {\r\n    error.value = 'Las contraseñas no coinciden!';\r\n    success.value = ''; // Limpiar mensaje de éxito\r\n    return;\r\n  }\r\n  \r\n  // Limpiar mensajes antes de enviar\r\n  error.value = '';\r\n  success.value = '';\r\n\r\n  try {\r\n    // Hacer la petición POST al backend\r\n    const response = await axios.post('http://localhost:4000/usuarios', {\r\n      username: form.value.username,\r\n      email: form.value.email,\r\n      password: form.value.password,\r\n    });\r\n\r\n    // Manejar la respuesta exitosa\r\n    success.value = response.data.message; // Mostrar mensaje de éxito\r\n    form.value.username = ''; // Limpiar el formulario\r\n    form.value.email = '';\r\n    form.value.password = '';\r\n    form.value.confirmPassword = '';\r\n  } catch (err) {\r\n    // Manejar errores, como problemas con el servidor\r\n    console.error('Error registering user:', err);\r\n    if (err.response && err.response.data && err.response.data.message) {\r\n      error.value = err.response.data.message;\r\n    } else {\r\n      error.value = 'Hubo un error con el registro. Intenta de nuevo.';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* Estilo específico para el registro */\r\n.register-page {\r\n  margin: 0;\r\n  padding: 0;\r\n  background-image: url('https://imagenes.20minutos.es/files/image_1920_1080/uploads/imagenes/2023/01/02/surtido-de-tapas-espanolas.jpeg');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.register-container {\r\n  max-width: 400px;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 10px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  background-color: rgb(226, 226, 226);\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input-group {\r\n  margin: 15px;\r\n}\r\n\r\nlabel {\r\n  display: block; /* Hace que la etiqueta ocupe toda la línea */\r\n  margin-bottom: 5px; /* Espacio entre la etiqueta y el input */\r\n  font-weight: bold; /* Hacer el texto más destacado */\r\n  text-align: left; /* Alinear etiquetas a la izquierda */\r\n}\r\n\r\nform div {\r\n  margin-bottom: 15px;\r\n}\r\n\r\ninput {\r\n  width: 100%; /* Input ocupa el 100% */\r\n  max-width: 380px; /* Ajusta el ancho máximo si es necesario */\r\n  padding: 10px; /* Espacio interno en los inputs */\r\n  border: 1px solid #ccc; /* Borde del input */\r\n  border-radius: 5px; /* Bordes redondeados */\r\n  display: block; /* Asegura que el input se comporte como bloque */\r\n  margin: 0 auto; /* Centra el input */\r\n}\r\n\r\n\r\ninput:focus {\r\n  border-color: #007BFF;\r\n  outline: none;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007BFF;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  margin-top: 10px;\r\n  font-size: 14px;\r\n}\r\n\r\n.success {\r\n  color: green;\r\n  margin-top: 10px;\r\n  font-size: 14px; /* Estilo para el mensaje de éxito */\r\n}\r\n</style>\r\n"],"mappings":";;;uBACEA,YAAA,CAkBaC,qBAAA;IAnBfC,OAAA,EAAAC,QAAA,CAEI,MAAyC,CAAzCC,mBAAA,sCAAyC,E,0BACzCC,mBAAA,CAeM;MAfDC,KAAK,EAAC;IAAe,IACxBD,mBAAA,CAaM;MAbDC,KAAK,EAAC;IAAoB,IAC7BD,mBAAA,CAAmB,YAAf,YAAU,GACdA,mBAAA,CAUO,eATLA,mBAAA,CAGM;MAHDC,KAAK,EAAC;IAAa,IACtBD,mBAAA,CAAgC;MAAzBE,GAAG,EAAC;IAAO,GAAC,OAAK,GACxBF,mBAAA,CAAiC;MAA1BG,IAAI,EAAC,OAAO;MAACC,EAAE,EAAC;UAEzBJ,mBAAA,CAGM;MAHDC,KAAK,EAAC;IAAa,IACtBD,mBAAA,CAAwC;MAAjCE,GAAG,EAAC;IAAU,GAAC,YAAU,GAChCF,mBAAA,CAAuC;MAAhCG,IAAI,EAAC,UAAU;MAACC,EAAE,EAAC;UAE5BJ,mBAAA,CAAwC;MAAhCG,IAAI,EAAC;IAAQ,GAAC,WAAS,E;IAfzCE,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}